% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cluster_param_selection.R
\name{ClusterParamSelection}
\alias{ClusterParamSelection}
\title{ClusterParamSelection}
\usage{
ClusterParamSelection(dataset = NULL, distance = NULL, k = c(2, 5,
  10), method = c("pam", "agglom", "diana"), metric = "euclidean",
  scale = TRUE, nthreads = 2, save.plot = TRUE, save.df = TRUE,
  path = NULL)
}
\arguments{
\item{dataset}{A transcriptomics dataset. Preferably filtered first. First
columns should be gene names. All other columns should be expression levels.}

\item{distance}{A distance matrix. If a distance matrix has already been
created (such as by using the \code{\link{DistanceGen}} function), the matrix
 can be passed to this function to save time. If a distance matrix is not
 provided then it will be generated by the function.}

\item{k}{A numeric vector giving the number of clusters to be evaluated.}

\item{method}{The clustering method(s) to be used. Multiple methods can be
considered by providing a character vector. Currently accepts 'pam',
'agglom' and 'diana'.}

\item{metric}{The distance metric to be used to calculate the distances
between genes. See parallelDist::parDist for all accepted arguments. Also
allows the option of 'abs.correlation'. Not used if a distance matrix is
provided.}

\item{scale}{Logical. If TRUE then each gene will be scaled.}

\item{nthreads}{The number of threads to be used for parallel computations.
If NULL then the maximum number of threads available will be used.}

\item{save.plot}{Logical. If TRUE then saves the plots generated.}

\item{save.df}{Logical. If TRUE then saves the validation metric results as a
.csv file.}

\item{path}{The directory to be used for saving plots and the validation
metric results to. Uses the name of the dataset object appended with
'_validation' if this argument is not specified.}
}
\description{
Calculates validation metrics for different clustering methods
 and different numbers of partitions. The validation metrics are plotted.
}
\examples{
filter.df <- CombiFilter(Laurasmappings)
k.options <- seq(2,10)
hclust.validation <- ClusterParamSelection(filter.df, k=k.options)
}
